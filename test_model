from keras.models import model_from_json

model = model_from_json(open('sports1M_model.json', 'r').read())

model.load_weights('sports1M_weights.h5')

model.compile(loss='mean_squared_error', optimizer='sgd')

model.add(main())

model.add(tf.keras.layers.Dense(512, activation='relu')) 

model.add(tf.keras.layers.Dropout(0.5)) 

model.add(tf.keras.layers.Dense(no_classes, activation='softmax')) 

_input = Input(shape=[max_length], dtype='int32')

# get the embedding layer
embedded = Embedding(
        input_dim=vocab_size,
        output_dim=embedding_size,
        input_length=max_length,
        trainable=False,
        mask_zero=False
    )(_input)

activations = LSTM(units, return_sequences=True)(embedded)

# compute importance for each step
attention = Dense(1, activation='tanh')(activations)
attention = Flatten()(attention)
attention = Activation('softmax')(attention)
attention = RepeatVector(units)(attention)
attention = Permute([2, 1])(attention)


sent_representation = merge([activations, attention], mode='mul')
sent_representation = Lambda(lambda xin: K.sum(xin, axis=-2), output_shape=(units,))(sent_representation)

probabilities = Dense(3, activation='softmax')(sent_representation)

